{"name":"Atlantis.js","tagline":"","body":"<a name=\"top\">\r\n<p align=\"center\">\r\n  <img src=\"http://p.ninjacdn.co.uk/atlantisjs/v0.9.2/atlantisLogo.png\" alt=\"AtlantisJS\"/>\r\n</p>\r\n\r\nAtlantis.js = video.js + plugins + content marketing centric video embed code\r\n\r\nAtlantis.js is a video player designed specifically for content marketing gurus and growth hackers alike. With a whole host of features such as call to actions and analytics tracking it is our goal to provide a simple to use video player for marketers. We still have a way to go.\r\n\r\nAnother video player? Why not just use video.js + plugins?\r\n----------------------------------------------------------\r\n\r\n[Video.js](http://www.videojs.com/) is a fantastic piece of work and continues to grow and improve every day. While video.js is great for expansion and fiddling we found after developing a few websites that we needed something simple yet powerful. A single source file, a more declarative syntax, and a single platform brings us these things.\r\n\r\n## Features\r\n\r\n+ [Resolution Switching](#resolution-switching)\r\n+ [Video Switching](#video-switching)\r\n+ [Social Media sharing](#social-media-sharing)\r\n+ [Related Videos](#related-videos)\r\n+ [Call to Actions](#call-to-actions)\r\n+ [Google Analytics Integration](#google-analytics-integration)\r\n+ [Hotspots](#hotspots)\r\n+ [Custom Templating](#custom-templating)\r\n\r\n## Quick Start\r\n\r\nInsert the necessary scripts:\r\n```\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n<script src=\"http://p.ninjacdn.co.uk/atlantisjs/v0.9.2/atlantis.js\" type=\"text/javascript\"></script>\r\n<link rel=\"stylesheet\" href=\"http://p.ninjacdn.co.uk/atlantisjs/v0.9.2/atlantisjs.css\" type=\"text/css\" />\r\n```\r\nAdd the relevant source code to your webpage:\r\n```\r\n<video id=\"video1\" class=\"ajs-default-skin atlantis-js\" controls preload=\"auto\" width=\"640\" height=\"360\" poster=\"http://video-js.zencoder.com/oceans-clip.png\"> \t\r\n    <source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\" type=\"video/mp4\" data-resolution=\"360p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\" type=\"video/ogg\" data-resolution=\"360p\">\r\n</video>\r\n```\t\r\nInclude the following javascript embed code at some point lower down the page:\r\n```\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"video1\"\r\n\t}]\r\n});\r\n```\r\n\r\nEt voila! The video plays and we can all go home. Lemonade for everybody :)\r\n\r\nBut wait! What about all the extra features mentioned earlier? Yes I suppose we should cover those as well.\r\n\r\n<a name=\"resolution-switching\"></a><a name=\"video-switching\"></a> \r\n## Change the video source and resolution switching\r\n\r\nThese two are kind of intertwined. Lets have a look at the extra mark-up we need for changing source:\r\n\r\n```\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"video1\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t}]\r\n\t},{\r\n\t\tid: \"video2\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t}]\r\n\t}]\r\n});\r\n\t\r\n```\r\n\r\nWe now have two videos with identical sources. We can even switch between them by calling:\r\n\r\n```\r\natlantisVideo.changeVideoById(\"video2\");\r\n```\t\r\n\r\nJust bind the method to a button and away we go.\r\n\r\nAs for the multiple resolutions we will need to make two revisions.\r\n\r\nFirstly add the extra sources to the html:\r\n\r\n```\r\n<video id=\"video1\" class=\"ajs-default-skin atlantis-js\" controls preload=\"auto\" width=\"640\" height=\"360\" poster=\"http://video-js.zencoder.com/oceans-clip.png\"> \t\r\n    <source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\" type=\"video/mp4\" data-resolution=\"360p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\" type=\"video/ogg\" data-resolution=\"360p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing.mp4\" type=\"video/mp4\" data-resolution=\"720p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing720p.ogg\" type=\"video/ogg\" data-resolution=\"720p\">\r\n</video>\r\n```\r\n\r\nAnd then add the sources to the embed code:\r\n\r\n```\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"video1\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing720p.ogg\"\r\n\t\t}]\r\n\t},{\r\n\t\tid: \"video2\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing720p.ogg\"\r\n\t\t}]\r\n\t}]\r\n});\r\n\t\r\n```\r\n\t\r\nMission Complete!\r\n\r\n<a name=\"social-media-sharing\"></a> \r\n## Social Media Sharing\r\n\r\nThis section is a little sparse given the lack of customization currently present. At the time of writing there are 5 different social networks automatically included in Atlantis.JS: Facebook, Twitter, LinkedIn, Google+ and Tumblr. In the future we aim to add configuration to be able to turn these defaults off and add the ability to be able to add your own social networks in the source code.\r\n\r\n<a name=\"related-videos\"></a> \r\n## Related Videos\r\n\r\nWhen we talk about related videos what we refer to is the splash screen that appears right after a video finishes. The problem with this splash is that people's opinions as to what constitutes a finishing splash varies widely. While our fantastic [templating options](#custom-templating) allow for a wide range of customisation in this department, we identified that marketers were generally looking for one of three options:\r\n\r\n+ Just Related Videos\r\n+ Just a call to action\r\n+ Both\r\n\r\nAs such for the default we have three different templates depending on what options are given to the player.\r\n\r\nLets take a look at an example embed:\r\n\r\n```\r\n<script type=\"text/javascript\">\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"vid1\",\r\n\t\tendOfVideoOptions: {\r\n\t\t\trelatedVideos: {\r\n\t\t\t\tlinkTarget:\"player\",\r\n\t\t\t\ttitle: \"Related Videos\",\r\n\t\t\t\titems: [\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\timg: \"www.reelcontent.co.uk/assets/video_poster/StudioSmall.jpg\", \r\n\t\t\t\t\t\ttitle: \"Studio Videos\",\r\n\t\t\t\t\t\tlinkId: \"related-studio\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\timg: \"www.reelcontent.co.uk/assets/video_poster/StudioSmall.jpg\", \r\n\t\t\t\t\t\ttitle: \"On Location Videos\",\r\n\t\t\t\t\t\tlinkId: \"related-on-location\"\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\timg: \"www.reelcontent.co.uk/assets/video_poster/StudioSmall.jpg\", \r\n\t\t\t\t\t\ttitle: \"Animation Videos\",\r\n\t\t\t\t\t\tlinkId: \"related-animation\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t}]\r\n});\r\n```\r\n\r\n#### endOfVideoOptions.template\r\nType: `String`\r\nDefault: `various`\r\nRequired: `No`\r\n\r\nName of the dust template to use to show the end of video screen. By default this varies on whether related videos and/or endOfVideoCallToActions are set.\r\n\r\n#### endOfVideoOptions.relatedVideos.title\r\nType: `String`\r\nDefault: `Related Videos`\r\nRequired: `No`\r\n\r\nSets the title for the related videos section.\r\n\r\n#### endOfVideoOptions.relatedVideos.items.img\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the image url for the related video.\r\n\r\n#### endOfVideoOptions.relatedVideos.items.title\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the title for the related video.\r\n\r\n#### endOfVideoOptions.relatedVideos.items.linkId\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the title of the video that the related video will point to. Only applicable if linkTarget is set to `player`\r\n\r\n#### endOfVideoOptions.relatedVideos.items.url\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the URL of the video that the related video will point to. Only applicable if linkTarget is set to `external`\r\n\r\n<a name=\"call-to-actions\"></a> \r\n## Call to Actions\r\n\r\nIt wouldn't be marketing if we weren't talking about call to actions. At this point in time there are two points for the introduction of call to actions: \r\n\r\n+ At the end of the video alongside the related videos\r\n+ Along the top bar when the user pauses the video\r\n\r\nBoth are very easy to implement. \r\n\r\n### End of Video Call to Actions\r\n\r\nHere's an example embed\r\n\r\n```\r\n<script type=\"text/javascript\">\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"vid1\",\r\n\t\tendOfVideoOptions: {\r\n\t\t\tcallToAction: {\r\n\t\t\t\ttitle: \"78% of people watch online video every week\",\r\n\t\t\t\tsubtitle: \"Shouldn't you be engaging the growing audience?\",\r\n\t\t\t\tbutton: {\r\n\t\t\t\t\tlink: \"https://github.com/Axonn/Atlantis.js\",\r\n\t\t\t\t\ttext: \"Get Started\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}]\r\n});\r\n```\r\n\r\n#### endOfVideoOptions.callToAction.title\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSets the text used in the main title \r\n\r\n#### endOfVideoOptions.relatedVideos.subtitle\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the text used in the line just below the title. This line may disappear on lower resolutions so ensure the title works alone and with the subtitle.\r\n\r\n#### endOfVideoOptions.relatedVideos.button.link\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSets the URL that the call to action links to\r\n\r\n#### endOfVideoOptions.relatedVideos.button.text\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSets the text on the button\r\n\r\n#### endOfVideoOptions.relatedVideos.button.text\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSets the text on the button\r\n\r\nThese settings are just those used for the default template. If the html layout doesn't suit you you can render an dust template and embed using the template value. The model passed into this template will be the whole of endOfVideoOptions.\r\n\r\n#### endOfVideoOptions.template\r\nType: `String`\r\nDefault: `various`\r\nRequired: `No`\r\n\r\nName of the dust template to use to show the end of video screen. By default this varies on whether related videos and/or endOfVideoCallToActions are set.\r\n\r\n### Pause Call to Actions\r\n\r\nHere's an example embed. This one's pretty simple.\r\n\r\n```\r\n<script type=\"text/javascript\">\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"vid1\",\r\n\t\tpauseCallToAction: {\r\n\t\t\ttext: \"Super sexy call to actions <a href='https://github.com/Axonn/Atlantis.js/'>Drive traffic even when paused</a>\"\r\n\t\t}\r\n\t}]\r\n});\r\n```\r\n\r\n#### pauseCallToAction.text\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nText to be injected into the call to action. Any valid html is allowed. \r\n\r\n<a name=\"google-analytics-integration\"></a> \r\n## Google Analytics\r\n\r\nGoogle analytics track as many of our features as is possible as events. Here is a quick rundown of the different possible values:\r\n\r\n#### Play\r\nTriggers when the video is played for the first time. Will only trigger once per page load. (Analytics Event name: \"Play\")\r\n\r\n#### Pause\r\nTriggers anytime the video is paused. Can trigger multiple times during a video watch. (Analytics Event name: \"Pause\")\r\n\r\n#### Error\r\nTriggers anytime an error is thrown by the javascript. Can trigger multiple times during a video watch. (Analytics Event name: \"Error\")\r\n\r\n#### Share\r\nThis is for use with the share plugin. This will trigger anytime one of the share sources is clicked. It should be noted that clicking one of the share sources and actually sharing the video might be slightly different metrics this is because of visitor who visit the share page but fail to follow through with sharing. (Analytics Event name: \"Share\")\r\n\r\n#### QualityChange\r\nThis is for use with the resolution switching plugin. This will trigger anytime the resolution is switched and will return a different event based upon the new resolution.  (Analytics Event name: QualityChange_* where * is the resolution, e.g. QualityChange_1080p).\r\n\r\n#### VideoWatched\r\nThis will trigger whenever the user reaches a specific point in the video. The specific times where the event is triggered are (in seconds) 0.5, 5, 10, 15, 30, 45, 60, 90, 120, 150, 180 and so on in multiples of 30 seconds. This gives greater accuracy over the first minute of video with less later on. (Analytics Event name: VideoWatched_* where * is the time, e.g. VideoWatched_45)\r\n\r\n<a name=\"hotspots\"></a> \r\n## Hotspots\r\n\r\nWith hotspots we can make content more engaging and interactive. They are probably the most complex to integrate so handle with care!\r\n\r\nAgain here's an example embed:\r\n\r\n```\r\n<script type=\"text/javascript\">\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"vid1\",\r\n\t\thotspots: [{\r\n\t\t\tstart: 67.4,\r\n\t\t\tposition: [{\r\n\t\t\t\t\tduration: 5.3,\r\n\t\t\t\t\tpath: AtlantisJS.Static(0.265,0.318)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tduration: 0.4,\r\n\t\t\t\t\tpath: AtlantisJS.Linear(0.265,0.325, 0.16,0.46)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tduration: 16,\r\n\t\t\t\t\tpath: AtlantisJS.Static(0.16,0.46)\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tduration: 16,\r\n\t\t\t\t\tpath: AtlantisJS.CubicBezier(0.16, 0.46, 0.4, 0.8, 0.2, 0.5, 0.9, 0.95)\r\n\t\t\t\t}],\r\n\t\t\theight: 0.32,\r\n\t\t\twidth: 0.18,\r\n\t\t\tlinkTarget: \"splash\",\r\n\t\t\tlinkSplashData: {\r\n\t\t\t\timageUrl: \"whiteLogo.png\",\r\n\t\t\t\tbutton1Text: \"GitHub\",\r\n\t\t\t\tbutton2Text: \"Back to Video\"\r\n\t\t\t},\r\n\t\t\ttext: \"Example Hotspot\"\r\n\t\t}],\r\n\t}]\r\n});\r\n```\r\n\r\n#### hotspots.start\r\nType: `Number`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSets the time (in seconds) when a hotspot will appear.\r\n\r\n#### hotspots.position.duration\r\nType: `Number`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSets the time (in seconds) that the hotspot will either stay in its position or follow a specified path.\r\n\r\n#### hotspots.position.path\r\nType: `Function`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nThe function of the path for the hotspot to follow. There are three paths currently supported:\r\n\r\n+ AtlantisJS.Static(x1, y1)\r\n+ AtlantisJS.Linear(x1, y1, x2, y2)\r\n\twhere \t(x1, y1) is the start point\r\n\t\t\t(x2, y2) is the end point\r\n+ AtlantisJS.CubicBezier(x1, y1, x2, y2, x3, y3, x4, y4), \r\n\twhere \t(x1, y1) is the start point\r\n\t\t\t(x2, y2) is the direction out of the first point\r\n\t\t\t(x3, y3) is the direction into the end point\r\n\t\t\t(x4, y4) is the end point\r\n\t\t\t\r\nAll these values are given as fractions of the video (not the container, so ignoring black bars). So x = 0.5 would represent a position 50% in from the left.\r\n\r\n\r\n#### hotspots.height\r\nType: `Number`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nHeight of the hotspot.\r\n\r\nThis value is given as a fraction of the video (not the container, so ignoring black bars). So a value of 0.1 would represent a height of 10% of the video.\r\n\r\n#### hotspots.width\r\nType: `Number`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nWidth of the hotspot.\r\n\r\nThis value is given as a fraction of the video (not the container, so ignoring black bars). So a value of 0.1 would represent a width of 10% of the video.\r\n\r\n#### hotspots.text\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nThe text added to the hotspot.\r\n\r\n#### hotspots.linkTarget\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nSpecified the behaviour of the hotspot. The two available behaviours are showing a splash screen (value: \"splash\") or linking to another website (value: \"external\").\r\n\r\n#### hotspots.linkSplashData.imageUrl \r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nThe url for the image to be shown.\r\n\r\n#### hotspots.linkSplashData.button1Text \r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nThis is the text for the button that in the default template will link away to another site.\r\n\r\n#### hotspots.linkSplashData.button2Text \r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nThis is the text for the button that in the default template will link back to the video.\r\n\r\n#### hotspots.linkSplashData.linkUrl \r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nIf the hotspot links to another websitre this is where you set the url for that website.\r\n\r\n#### hotspots.template\r\nType: `String`\r\nDefault: `ajsHotspotDefault`\r\nRequired: `No`\r\n\r\nName of the dust template to use for the hotspot. The model passed through will have the following values: \"top\" (px), \"left\"(px), \"height\"(px), \"width\"(px), \"linkTarget\", \"linkUrl\" and \"text\".\r\n\r\n#### hotspots.linkTemplate\r\nType: `String`\r\nDefault: `ajsHotspotSplashPageDefault`\r\nRequired: `No`\r\n\r\nName of the dust template to use to show the end of video screen. The model passed through will be the hotspots.linkSplashData object.\r\n\r\nPhew! I hope that all makes sense.\r\n\r\n<a name=\"custom-templating\"></a> \r\n## Custom Templating\r\n\r\nWhile this is not a tangible feature per se, it's penetration of functionality into all the other features made it feel like it warranted it's own section. In a lot of the configuration details there is a parameter called \"template\". This refers to the name of a [dust](http://linkedin.github.io/dustjs/) template registered in dust's global collection. Each of these features uses a dust template underneath set by default, however these can be overridden if you wish to write your own.","google":"UA-44181345-1","note":"Don't delete this file! It's used internally to help with page regeneration."}