{"name":"Atlantis.js","tagline":"","body":"<a name=\"top\">\r\n<p align=\"center\">\r\n  <img src=\"http://p.ninjacdn.co.uk/atlantisjs/v0.9.2/atlantisLogo.png\" alt=\"AtlantisJS\"/>\r\n</p>\r\n\r\nAtlantis.js = video.js + plugins + content marketing centric video embed code\r\n\r\nAtlantis.js is a video player designed specifically for content marketing gurus and growth hackers alike. With a whole host of features such as call to actions and analytics tracking it is our goal to provide a simple to use video player for marketers. We still have a way to go.\r\n\r\nAnother video player? Why not just use video.js + plugins?\r\n----------------------------------------------------------\r\n\r\n[Video.js](http://www.videojs.com/) is a fantastic piece of work and continues to grow and improve every day. While video.js is great for expansion and fiddling we found after developing a few websites that we needed something simple yet powerful. A single source file, a more declarative syntax, and a single platform brings us these things.\r\n\r\n## Features\r\n\r\n+ [Resolution Switching](#resolution-switching)\r\n+ [Video Switching](#video-switching)\r\n+ [Social Media sharing](#social-media-sharing)\r\n+ [Related Videos](#related-videos)\r\n+ [Call to Actions](#call-to-actions)\r\n+ [Google Analytics Integration](#google-analytics-integration)\r\n+ [Hotspots](#hotspots)\r\n+ [Custom Templating](#custom-templating)\r\n\r\n## Quick Start\r\n\r\nInsert the necessary scripts:\r\n```\r\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\r\n<script src=\"http://p.ninjacdn.co.uk/atlantisjs/v0.9.2/atlantis.js\" type=\"text/javascript\"></script>\r\n<link rel=\"stylesheet\" href=\"http://p.ninjacdn.co.uk/atlantisjs/v0.9.2/atlantisjs.css\" type=\"text/css\" />\r\n```\r\nAdd the relevant source code to your webpage:\r\n```\r\n<video id=\"video1\" class=\"ajs-default-skin atlantis-js\" controls preload=\"auto\" width=\"640\" height=\"360\" poster=\"http://video-js.zencoder.com/oceans-clip.png\"> \t\r\n    <source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\" type=\"video/mp4\" data-resolution=\"360p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\" type=\"video/ogg\" data-resolution=\"360p\">\r\n</video>\r\n```\t\r\nInclude the following javascript embed code at some point lower down the page:\r\n```\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"video1\"\r\n\t}]\r\n});\r\n```\r\n\r\nEt voila! The video plays and we can all go home. Lemonade for everybody :)\r\n\r\nBut wait! What about all the extra features mentioned earlier? Yes I suppose we should cover those as well.\r\n\r\n<a name=\"resolution-switching\"></a><a name=\"video-switching\"></a> \r\n## Change the video source and resolution switching\r\n\r\nThese two are kind of intertwined. Lets have a look at the extra mark-up we need for changing source:\r\n\r\n```\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"video1\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t}]\r\n\t},{\r\n\t\tid: \"video2\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t}]\r\n\t}]\r\n});\r\n\t\r\n```\r\n\r\nWe now have two videos with identical sources. We can even switch between them by calling:\r\n\r\n```\r\natlantisVideo.changeVideoById(\"video2\");\r\n```\t\r\n\r\nJust bind the method to a button and away we go.\r\n\r\nAs for the multiple resolutions we will need to make two revisions.\r\n\r\nFirstly add the extra sources to the html:\r\n\r\n```\r\n<video id=\"video1\" class=\"ajs-default-skin atlantis-js\" controls preload=\"auto\" width=\"640\" height=\"360\" poster=\"http://video-js.zencoder.com/oceans-clip.png\"> \t\r\n    <source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\" type=\"video/mp4\" data-resolution=\"360p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\" type=\"video/ogg\" data-resolution=\"360p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing.mp4\" type=\"video/mp4\" data-resolution=\"720p\">\r\n\t<source src=\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing720p.ogg\" type=\"video/ogg\" data-resolution=\"720p\">\r\n</video>\r\n```\r\n\r\nAnd then add the sources to the embed code:\r\n\r\n```\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"video1\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing720p.ogg\"\r\n\t\t}]\r\n\t},{\r\n\t\tid: \"video2\",\r\n\t\tsources: [{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"360\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing360p.ogg\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/mp4\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing.mp4\"\r\n\t\t},\r\n\t\t{\r\n\t\t\tresolution: \"720\", \r\n\t\t\ttype: \"video/ogg\", \r\n\t\t\tsrc:\"http://media.reelcontent.co.uk/9e4c69c5ae2c215d/old-website/ReelContentVideoContentMarketing720p.ogg\"\r\n\t\t}]\r\n\t}]\r\n});\r\n\t\r\n```\r\n\t\r\nMission Complete!\r\n\r\n<a name=\"social-media-sharing\"></a> \r\n## Social Media Sharing\r\n\r\nThis section is a little sparse given the lack of customization currently present. At the time of writing there are 5 different social networks automatically included in Atlantis.JS: Facebook, Twitter, LinkedIn, Google+ and Tumblr. In the future we aim to add configuration to be able to turn these defaults off and add the ability to be able to add your own social networks in the source code.\r\n\r\n<a name=\"related-videos\"></a> \r\n## Related Videos\r\n\r\nWhen we talk about related videos what we refer to is the splash screen that appears right after a video finishes. The problem with this splash is that people's opinions as to what constitutes a finishing splash varies widely. While our fantastic [templating options](#custom-templating) allow for a wide range of customisation in this department, we identified that marketers were generally looking for one of three options:\r\n\r\n+ Just Related Videos\r\n+ Just a call to action\r\n+ Both\r\n\r\nAs such for the default we have three different templates depending on what options are given to the player.\r\n\r\nLets take a look at an example embed:\r\n\r\n```\r\n<script type=\"text/javascript\">\r\nvar atlantisVideo = AtlantisJS.Init({\r\n\tvideos: [{\r\n\t\tid: \"vid1\",\r\n\t\tendOfVideoOptions: {\r\n\t\t\trelatedVideos: {\r\n\t\t\t\tlinkTarget:\"player\",\r\n\t\t\t\ttitle: \"Related Videos\",\r\n\t\t\t\titems: [\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\timg: \"www.reelcontent.co.uk/assets/video_poster/StudioSmall.jpg\", \r\n\t\t\t\t\t\ttitle: \"Studio Videos\",\r\n\t\t\t\t\t\tlinkId: \"related-studio\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\timg: \"www.reelcontent.co.uk/assets/video_poster/StudioSmall.jpg\", \r\n\t\t\t\t\t\ttitle: \"On Location Videos\",\r\n\t\t\t\t\t\tlinkId: \"related-on-location\"\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t},\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\timg: \"www.reelcontent.co.uk/assets/video_poster/StudioSmall.jpg\", \r\n\t\t\t\t\t\ttitle: \"Animation Videos\",\r\n\t\t\t\t\t\tlinkId: \"related-animation\"\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t}\r\n\t}]\r\n});\r\n```\r\n\r\n#### endOfVideoOptions.template\r\nType: `String`\r\nDefault: `various`\r\nRequired: `No`\r\n\r\nName of the dust template to use to show the end of video screen. By default this varies on whether related videos and/or endOfVideoCallToActions are set.\r\n\r\n#### endOfVideoOptions.relatedVideos.linkTarget\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `Yes`\r\n\r\nOption indicating whether the related images link to another URL or to a different video already embedded in the player. Valid options: `player`,`external`.\r\n\r\n#### endOfVideoOptions.relatedVideos.title\r\nType: `String`\r\nDefault: `Related Videos`\r\nRequired: `No`\r\n\r\nSets the title for the related videos section.\r\n\r\n#### endOfVideoOptions.relatedVideos.items.img\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the image url for the related video.\r\n\r\n#### endOfVideoOptions.relatedVideos.items.title\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the title for the related video.\r\n\r\n#### endOfVideoOptions.relatedVideos.items.linkId\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the title of the video that the related video will point to. Only applicable if linkTarget is set to `player`\r\n\r\n#### endOfVideoOptions.relatedVideos.items.url\r\nType: `String`\r\nDefault: `undefined`\r\nRequired: `No`\r\n\r\nSets the URL of the video that the related video will point to. Only applicable if linkTarget is set to `external`\r\n\r\n<a name=\"call-to-actions\"></a> \r\n## Call to Actions\r\n\r\nComing Soon!\r\n\r\n<a name=\"google-analytics-integration\"></a> \r\n## Google Analytics\r\n\r\nComing Soon!\r\n\r\n<a name=\"hotspots\"></a> \r\n## Hotspots\r\n\r\nComing Soon!\r\n\r\n<a name=\"custom-templating\"></a> \r\n## Custom Templating\r\n\r\nWhile this is not a tangible feature per se, it's penetration of functionality into all the other features made it feel like it warranted it's own section. In a lot of the configuration details there is a parameter called \"template\". This refers to the name of a [dust](http://linkedin.github.io/dustjs/) template registered in dust's global collection. Each of these features uses a dust template underneath set by default, however these can be overridden if you wish to write your own.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}